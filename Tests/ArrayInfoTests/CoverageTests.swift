import XCTest
@testable import ArrayInfo

final class CoverageTests : XCTestCase {
    func testCoverage() {
        do {
            let a = Array<Int>([])
            let s = a.info(ArrayInfo<Int>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 0)
			XCTAssertEqual(s.isEmpty, true)
			XCTAssertEqual(s.sum, nil)
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, nil)
			XCTAssertEqual(s.minValue, nil)
			XCTAssertEqual(s.maxValue, nil)
			XCTAssertEqual(s.minValueIndex, nil)
			XCTAssertEqual(s.maxValueIndex, nil)
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, nil)
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int>([])
            let s = a.info(ArrayInfo<Int>.Options(rawValue: 1))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 0)
			XCTAssertEqual(s.isEmpty, true)
			XCTAssertEqual(s.sum, nil)
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, nil)
			XCTAssertEqual(s.minValue, nil)
			XCTAssertEqual(s.maxValue, nil)
			XCTAssertEqual(s.minValueIndex, nil)
			XCTAssertEqual(s.maxValueIndex, nil)
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, nil)
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int>([])
            let s = a.info(ArrayInfo<Int>.Options(rawValue: 3))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 0)
			XCTAssertEqual(s.isEmpty, true)
			XCTAssertEqual(s.sum, nil)
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, nil)
			XCTAssertEqual(s.minValue, nil)
			XCTAssertEqual(s.maxValue, nil)
			XCTAssertEqual(s.minValueIndex, nil)
			XCTAssertEqual(s.maxValueIndex, nil)
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, nil)
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int8>([])
            let s = a.info(ArrayInfo<Int8>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 0)
			XCTAssertEqual(s.isEmpty, true)
			XCTAssertEqual(s.sum, nil)
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, nil)
			XCTAssertEqual(s.minValue, nil)
			XCTAssertEqual(s.maxValue, nil)
			XCTAssertEqual(s.minValueIndex, nil)
			XCTAssertEqual(s.maxValueIndex, nil)
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, nil)
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int16>([])
            let s = a.info(ArrayInfo<Int16>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 0)
			XCTAssertEqual(s.isEmpty, true)
			XCTAssertEqual(s.sum, nil)
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, nil)
			XCTAssertEqual(s.minValue, nil)
			XCTAssertEqual(s.maxValue, nil)
			XCTAssertEqual(s.minValueIndex, nil)
			XCTAssertEqual(s.maxValueIndex, nil)
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, nil)
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int32>([])
            let s = a.info(ArrayInfo<Int32>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 0)
			XCTAssertEqual(s.isEmpty, true)
			XCTAssertEqual(s.sum, nil)
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, nil)
			XCTAssertEqual(s.minValue, nil)
			XCTAssertEqual(s.maxValue, nil)
			XCTAssertEqual(s.minValueIndex, nil)
			XCTAssertEqual(s.maxValueIndex, nil)
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, nil)
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt>([])
            let s = a.info(ArrayInfo<UInt>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 0)
			XCTAssertEqual(s.isEmpty, true)
			XCTAssertEqual(s.sum, nil)
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, nil)
			XCTAssertEqual(s.minValue, nil)
			XCTAssertEqual(s.maxValue, nil)
			XCTAssertEqual(s.minValueIndex, nil)
			XCTAssertEqual(s.maxValueIndex, nil)
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, nil)
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt8>([])
            let s = a.info(ArrayInfo<UInt8>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 0)
			XCTAssertEqual(s.isEmpty, true)
			XCTAssertEqual(s.sum, nil)
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, nil)
			XCTAssertEqual(s.minValue, nil)
			XCTAssertEqual(s.maxValue, nil)
			XCTAssertEqual(s.minValueIndex, nil)
			XCTAssertEqual(s.maxValueIndex, nil)
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, nil)
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt16>([])
            let s = a.info(ArrayInfo<UInt16>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 0)
			XCTAssertEqual(s.isEmpty, true)
			XCTAssertEqual(s.sum, nil)
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, nil)
			XCTAssertEqual(s.minValue, nil)
			XCTAssertEqual(s.maxValue, nil)
			XCTAssertEqual(s.minValueIndex, nil)
			XCTAssertEqual(s.maxValueIndex, nil)
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, nil)
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt32>([])
            let s = a.info(ArrayInfo<UInt32>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 0)
			XCTAssertEqual(s.isEmpty, true)
			XCTAssertEqual(s.sum, nil)
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, nil)
			XCTAssertEqual(s.minValue, nil)
			XCTAssertEqual(s.maxValue, nil)
			XCTAssertEqual(s.minValueIndex, nil)
			XCTAssertEqual(s.maxValueIndex, nil)
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, nil)
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Float>([])
            let s = a.info(ArrayInfo<Float>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 0)
			XCTAssertEqual(s.isEmpty, true)
			XCTAssertEqual(s.sum, nil)
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, nil)
			XCTAssertEqual(s.minValue, nil)
			XCTAssertEqual(s.maxValue, nil)
			XCTAssertEqual(s.minValueIndex, nil)
			XCTAssertEqual(s.maxValueIndex, nil)
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, nil)
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Double>([])
            let s = a.info(ArrayInfo<Double>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 0)
			XCTAssertEqual(s.isEmpty, true)
			XCTAssertEqual(s.sum, nil)
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, nil)
			XCTAssertEqual(s.minValue, nil)
			XCTAssertEqual(s.maxValue, nil)
			XCTAssertEqual(s.minValueIndex, nil)
			XCTAssertEqual(s.maxValueIndex, nil)
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, nil)
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Double>([])
            let s = a.info(ArrayInfo<Double>.Options(rawValue: 1))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 0)
			XCTAssertEqual(s.isEmpty, true)
			XCTAssertEqual(s.sum, nil)
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, nil)
			XCTAssertEqual(s.minValue, nil)
			XCTAssertEqual(s.maxValue, nil)
			XCTAssertEqual(s.minValueIndex, nil)
			XCTAssertEqual(s.maxValueIndex, nil)
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, nil)
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Double>([])
            let s = a.info(ArrayInfo<Double>.Options(rawValue: 3))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 0)
			XCTAssertEqual(s.isEmpty, true)
			XCTAssertEqual(s.sum, nil)
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, nil)
			XCTAssertEqual(s.minValue, nil)
			XCTAssertEqual(s.maxValue, nil)
			XCTAssertEqual(s.minValueIndex, nil)
			XCTAssertEqual(s.maxValueIndex, nil)
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, nil)
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int>([42])
            let s = a.info(ArrayInfo<Int>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 1)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(42.0))
			XCTAssertEqual(s.exactSum, Optional(42))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, true)
			XCTAssertEqual(s.avg, Optional(42.0))
			XCTAssertEqual(s.minValue, Optional(42))
			XCTAssertEqual(s.maxValue, Optional(42))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(42.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int>([42])
            let s = a.info(ArrayInfo<Int>.Options(rawValue: 1))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 1)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(42.0))
			XCTAssertEqual(s.exactSum, Optional(42))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, true)
			XCTAssertEqual(s.avg, Optional(42.0))
			XCTAssertEqual(s.minValue, Optional(42))
			XCTAssertEqual(s.maxValue, Optional(42))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(42.0))
			XCTAssertEqual(s.histogram, Optional([42: 1]))
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int>([42])
            let s = a.info(ArrayInfo<Int>.Options(rawValue: 3))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 1)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(42.0))
			XCTAssertEqual(s.exactSum, Optional(42))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, true)
			XCTAssertEqual(s.avg, Optional(42.0))
			XCTAssertEqual(s.minValue, Optional(42))
			XCTAssertEqual(s.maxValue, Optional(42))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(42.0))
			XCTAssertEqual(s.histogram, Optional([42: 1]))
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int8>([42])
            let s = a.info(ArrayInfo<Int8>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 1)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(42.0))
			XCTAssertEqual(s.exactSum, Optional(42))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, true)
			XCTAssertEqual(s.avg, Optional(42.0))
			XCTAssertEqual(s.minValue, Optional(42))
			XCTAssertEqual(s.maxValue, Optional(42))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(42.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int16>([42])
            let s = a.info(ArrayInfo<Int16>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 1)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(42.0))
			XCTAssertEqual(s.exactSum, Optional(42))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, true)
			XCTAssertEqual(s.avg, Optional(42.0))
			XCTAssertEqual(s.minValue, Optional(42))
			XCTAssertEqual(s.maxValue, Optional(42))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(42.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int32>([42])
            let s = a.info(ArrayInfo<Int32>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 1)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(42.0))
			XCTAssertEqual(s.exactSum, Optional(42))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, true)
			XCTAssertEqual(s.avg, Optional(42.0))
			XCTAssertEqual(s.minValue, Optional(42))
			XCTAssertEqual(s.maxValue, Optional(42))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(42.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt>([42])
            let s = a.info(ArrayInfo<UInt>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 1)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(42.0))
			XCTAssertEqual(s.exactSum, Optional(42))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, true)
			XCTAssertEqual(s.avg, Optional(42.0))
			XCTAssertEqual(s.minValue, Optional(42))
			XCTAssertEqual(s.maxValue, Optional(42))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(42.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt8>([42])
            let s = a.info(ArrayInfo<UInt8>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 1)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(42.0))
			XCTAssertEqual(s.exactSum, Optional(42))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, true)
			XCTAssertEqual(s.avg, Optional(42.0))
			XCTAssertEqual(s.minValue, Optional(42))
			XCTAssertEqual(s.maxValue, Optional(42))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(42.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt16>([42])
            let s = a.info(ArrayInfo<UInt16>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 1)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(42.0))
			XCTAssertEqual(s.exactSum, Optional(42))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, true)
			XCTAssertEqual(s.avg, Optional(42.0))
			XCTAssertEqual(s.minValue, Optional(42))
			XCTAssertEqual(s.maxValue, Optional(42))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(42.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt32>([42])
            let s = a.info(ArrayInfo<UInt32>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 1)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(42.0))
			XCTAssertEqual(s.exactSum, Optional(42))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, true)
			XCTAssertEqual(s.avg, Optional(42.0))
			XCTAssertEqual(s.minValue, Optional(42))
			XCTAssertEqual(s.maxValue, Optional(42))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(42.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Float>([42.0])
            let s = a.info(ArrayInfo<Float>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 1)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(42.0))
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, true)
			XCTAssertEqual(s.avg, Optional(42.0))
			XCTAssertEqual(s.minValue, Optional(42.0))
			XCTAssertEqual(s.maxValue, Optional(42.0))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(42.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Double>([42.0])
            let s = a.info(ArrayInfo<Double>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 1)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(42.0))
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, true)
			XCTAssertEqual(s.avg, Optional(42.0))
			XCTAssertEqual(s.minValue, Optional(42.0))
			XCTAssertEqual(s.maxValue, Optional(42.0))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(42.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Double>([42.0])
            let s = a.info(ArrayInfo<Double>.Options(rawValue: 1))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 1)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(42.0))
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, true)
			XCTAssertEqual(s.avg, Optional(42.0))
			XCTAssertEqual(s.minValue, Optional(42.0))
			XCTAssertEqual(s.maxValue, Optional(42.0))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(42.0))
			XCTAssertEqual(s.histogram, Optional([42.0: 1]))
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Double>([42.0])
            let s = a.info(ArrayInfo<Double>.Options(rawValue: 3))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 1)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(42.0))
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, true)
			XCTAssertEqual(s.avg, Optional(42.0))
			XCTAssertEqual(s.minValue, Optional(42.0))
			XCTAssertEqual(s.maxValue, Optional(42.0))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(42.0))
			XCTAssertEqual(s.histogram, Optional([42.0: 1]))
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int>([1, 3])
            let s = a.info(ArrayInfo<Int>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 2)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(4.0))
			XCTAssertEqual(s.exactSum, Optional(4))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1))
			XCTAssertEqual(s.maxValue, Optional(3))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(1))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(2))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(2.0))
			XCTAssertEqual(s.avgDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(2))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int>([1, 3])
            let s = a.info(ArrayInfo<Int>.Options(rawValue: 1))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 2)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(4.0))
			XCTAssertEqual(s.exactSum, Optional(4))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1))
			XCTAssertEqual(s.maxValue, Optional(3))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(1))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(2))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(2.0))
			XCTAssertEqual(s.avgDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(2))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, Optional([1: 1, 3: 1]))
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int>([1, 3])
            let s = a.info(ArrayInfo<Int>.Options(rawValue: 3))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 2)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(4.0))
			XCTAssertEqual(s.exactSum, Optional(4))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1))
			XCTAssertEqual(s.maxValue, Optional(3))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(1))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(2))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(2.0))
			XCTAssertEqual(s.avgDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(2))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, Optional([1: 1, 3: 1]))
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int8>([1, 3])
            let s = a.info(ArrayInfo<Int8>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 2)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(4.0))
			XCTAssertEqual(s.exactSum, Optional(4))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1))
			XCTAssertEqual(s.maxValue, Optional(3))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(1))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(2))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(2.0))
			XCTAssertEqual(s.avgDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(2))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int16>([1, 3])
            let s = a.info(ArrayInfo<Int16>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 2)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(4.0))
			XCTAssertEqual(s.exactSum, Optional(4))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1))
			XCTAssertEqual(s.maxValue, Optional(3))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(1))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(2))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(2.0))
			XCTAssertEqual(s.avgDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(2))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int32>([1, 3])
            let s = a.info(ArrayInfo<Int32>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 2)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(4.0))
			XCTAssertEqual(s.exactSum, Optional(4))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1))
			XCTAssertEqual(s.maxValue, Optional(3))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(1))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(2))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(2.0))
			XCTAssertEqual(s.avgDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(2))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt>([1, 3])
            let s = a.info(ArrayInfo<UInt>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 2)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(4.0))
			XCTAssertEqual(s.exactSum, Optional(4))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1))
			XCTAssertEqual(s.maxValue, Optional(3))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(1))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(2))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(2.0))
			XCTAssertEqual(s.avgDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(2))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt8>([1, 3])
            let s = a.info(ArrayInfo<UInt8>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 2)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(4.0))
			XCTAssertEqual(s.exactSum, Optional(4))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1))
			XCTAssertEqual(s.maxValue, Optional(3))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(1))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(2))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(2.0))
			XCTAssertEqual(s.avgDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(2))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt16>([1, 3])
            let s = a.info(ArrayInfo<UInt16>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 2)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(4.0))
			XCTAssertEqual(s.exactSum, Optional(4))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1))
			XCTAssertEqual(s.maxValue, Optional(3))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(1))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(2))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(2.0))
			XCTAssertEqual(s.avgDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(2))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt32>([1, 3])
            let s = a.info(ArrayInfo<UInt32>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 2)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(4.0))
			XCTAssertEqual(s.exactSum, Optional(4))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1))
			XCTAssertEqual(s.maxValue, Optional(3))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(1))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(2))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(2.0))
			XCTAssertEqual(s.avgDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(2))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Float>([1.0, 3.0])
            let s = a.info(ArrayInfo<Float>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 2)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(4.0))
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1.0))
			XCTAssertEqual(s.maxValue, Optional(3.0))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(1))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(2))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(2.0))
			XCTAssertEqual(s.avgDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(2))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Double>([1.0, 3.0])
            let s = a.info(ArrayInfo<Double>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 2)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(4.0))
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1.0))
			XCTAssertEqual(s.maxValue, Optional(3.0))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(1))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(2))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(2.0))
			XCTAssertEqual(s.avgDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(2))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Double>([1.0, 3.0])
            let s = a.info(ArrayInfo<Double>.Options(rawValue: 1))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 2)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(4.0))
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1.0))
			XCTAssertEqual(s.maxValue, Optional(3.0))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(1))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(2))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(2.0))
			XCTAssertEqual(s.avgDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(2))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, Optional([3.0: 1, 1.0: 1]))
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Double>([1.0, 3.0])
            let s = a.info(ArrayInfo<Double>.Options(rawValue: 3))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 2)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(4.0))
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1.0))
			XCTAssertEqual(s.maxValue, Optional(3.0))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(1))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(2))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(2.0))
			XCTAssertEqual(s.avgDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(2))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, Optional([3.0: 1, 1.0: 1]))
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int>([1, 2, 3])
            let s = a.info(ArrayInfo<Int>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 3)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(6.0))
			XCTAssertEqual(s.exactSum, Optional(6))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1))
			XCTAssertEqual(s.maxValue, Optional(3))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(2))
			XCTAssertEqual(s.exactMinDelta, Optional(1))
			XCTAssertEqual(s.exactMaxDelta, Optional(1))
			XCTAssertEqual(s.minDelta, Optional(1.0))
			XCTAssertEqual(s.maxDelta, Optional(1.0))
			XCTAssertEqual(s.avgDelta, Optional(1.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(1))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int>([1, 2, 3])
            let s = a.info(ArrayInfo<Int>.Options(rawValue: 1))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 3)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(6.0))
			XCTAssertEqual(s.exactSum, Optional(6))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1))
			XCTAssertEqual(s.maxValue, Optional(3))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(2))
			XCTAssertEqual(s.exactMinDelta, Optional(1))
			XCTAssertEqual(s.exactMaxDelta, Optional(1))
			XCTAssertEqual(s.minDelta, Optional(1.0))
			XCTAssertEqual(s.maxDelta, Optional(1.0))
			XCTAssertEqual(s.avgDelta, Optional(1.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(1))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, Optional([1: 1, 2: 1, 3: 1]))
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int>([1, 2, 3])
            let s = a.info(ArrayInfo<Int>.Options(rawValue: 3))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 3)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(6.0))
			XCTAssertEqual(s.exactSum, Optional(6))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1))
			XCTAssertEqual(s.maxValue, Optional(3))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(2))
			XCTAssertEqual(s.exactMinDelta, Optional(1))
			XCTAssertEqual(s.exactMaxDelta, Optional(1))
			XCTAssertEqual(s.minDelta, Optional(1.0))
			XCTAssertEqual(s.maxDelta, Optional(1.0))
			XCTAssertEqual(s.avgDelta, Optional(1.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(1))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, Optional([1: 1, 2: 1, 3: 1]))
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int8>([1, 2, 3])
            let s = a.info(ArrayInfo<Int8>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 3)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(6.0))
			XCTAssertEqual(s.exactSum, Optional(6))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1))
			XCTAssertEqual(s.maxValue, Optional(3))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(2))
			XCTAssertEqual(s.exactMinDelta, Optional(1))
			XCTAssertEqual(s.exactMaxDelta, Optional(1))
			XCTAssertEqual(s.minDelta, Optional(1.0))
			XCTAssertEqual(s.maxDelta, Optional(1.0))
			XCTAssertEqual(s.avgDelta, Optional(1.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(1))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int16>([1, 2, 3])
            let s = a.info(ArrayInfo<Int16>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 3)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(6.0))
			XCTAssertEqual(s.exactSum, Optional(6))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1))
			XCTAssertEqual(s.maxValue, Optional(3))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(2))
			XCTAssertEqual(s.exactMinDelta, Optional(1))
			XCTAssertEqual(s.exactMaxDelta, Optional(1))
			XCTAssertEqual(s.minDelta, Optional(1.0))
			XCTAssertEqual(s.maxDelta, Optional(1.0))
			XCTAssertEqual(s.avgDelta, Optional(1.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(1))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int32>([1, 2, 3])
            let s = a.info(ArrayInfo<Int32>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 3)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(6.0))
			XCTAssertEqual(s.exactSum, Optional(6))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1))
			XCTAssertEqual(s.maxValue, Optional(3))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(2))
			XCTAssertEqual(s.exactMinDelta, Optional(1))
			XCTAssertEqual(s.exactMaxDelta, Optional(1))
			XCTAssertEqual(s.minDelta, Optional(1.0))
			XCTAssertEqual(s.maxDelta, Optional(1.0))
			XCTAssertEqual(s.avgDelta, Optional(1.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(1))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt>([1, 2, 3])
            let s = a.info(ArrayInfo<UInt>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 3)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(6.0))
			XCTAssertEqual(s.exactSum, Optional(6))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1))
			XCTAssertEqual(s.maxValue, Optional(3))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(2))
			XCTAssertEqual(s.exactMinDelta, Optional(1))
			XCTAssertEqual(s.exactMaxDelta, Optional(1))
			XCTAssertEqual(s.minDelta, Optional(1.0))
			XCTAssertEqual(s.maxDelta, Optional(1.0))
			XCTAssertEqual(s.avgDelta, Optional(1.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(1))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt8>([1, 2, 3])
            let s = a.info(ArrayInfo<UInt8>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 3)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(6.0))
			XCTAssertEqual(s.exactSum, Optional(6))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1))
			XCTAssertEqual(s.maxValue, Optional(3))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(2))
			XCTAssertEqual(s.exactMinDelta, Optional(1))
			XCTAssertEqual(s.exactMaxDelta, Optional(1))
			XCTAssertEqual(s.minDelta, Optional(1.0))
			XCTAssertEqual(s.maxDelta, Optional(1.0))
			XCTAssertEqual(s.avgDelta, Optional(1.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(1))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt16>([1, 2, 3])
            let s = a.info(ArrayInfo<UInt16>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 3)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(6.0))
			XCTAssertEqual(s.exactSum, Optional(6))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1))
			XCTAssertEqual(s.maxValue, Optional(3))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(2))
			XCTAssertEqual(s.exactMinDelta, Optional(1))
			XCTAssertEqual(s.exactMaxDelta, Optional(1))
			XCTAssertEqual(s.minDelta, Optional(1.0))
			XCTAssertEqual(s.maxDelta, Optional(1.0))
			XCTAssertEqual(s.avgDelta, Optional(1.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(1))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt32>([1, 2, 3])
            let s = a.info(ArrayInfo<UInt32>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 3)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(6.0))
			XCTAssertEqual(s.exactSum, Optional(6))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1))
			XCTAssertEqual(s.maxValue, Optional(3))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(2))
			XCTAssertEqual(s.exactMinDelta, Optional(1))
			XCTAssertEqual(s.exactMaxDelta, Optional(1))
			XCTAssertEqual(s.minDelta, Optional(1.0))
			XCTAssertEqual(s.maxDelta, Optional(1.0))
			XCTAssertEqual(s.avgDelta, Optional(1.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(1))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Float>([1.0, 2.0, 3.0])
            let s = a.info(ArrayInfo<Float>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 3)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(6.0))
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1.0))
			XCTAssertEqual(s.maxValue, Optional(3.0))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(2))
			XCTAssertEqual(s.exactMinDelta, Optional(1))
			XCTAssertEqual(s.exactMaxDelta, Optional(1))
			XCTAssertEqual(s.minDelta, Optional(1.0))
			XCTAssertEqual(s.maxDelta, Optional(1.0))
			XCTAssertEqual(s.avgDelta, Optional(1.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(1))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Double>([1.0, 2.0, 3.0])
            let s = a.info(ArrayInfo<Double>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 3)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(6.0))
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1.0))
			XCTAssertEqual(s.maxValue, Optional(3.0))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(2))
			XCTAssertEqual(s.exactMinDelta, Optional(1))
			XCTAssertEqual(s.exactMaxDelta, Optional(1))
			XCTAssertEqual(s.minDelta, Optional(1.0))
			XCTAssertEqual(s.maxDelta, Optional(1.0))
			XCTAssertEqual(s.avgDelta, Optional(1.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(1))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Double>([1.0, 2.0, 3.0])
            let s = a.info(ArrayInfo<Double>.Options(rawValue: 1))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 3)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(6.0))
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1.0))
			XCTAssertEqual(s.maxValue, Optional(3.0))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(2))
			XCTAssertEqual(s.exactMinDelta, Optional(1))
			XCTAssertEqual(s.exactMaxDelta, Optional(1))
			XCTAssertEqual(s.minDelta, Optional(1.0))
			XCTAssertEqual(s.maxDelta, Optional(1.0))
			XCTAssertEqual(s.avgDelta, Optional(1.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(1))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, Optional([2.0: 1, 3.0: 1, 1.0: 1]))
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Double>([1.0, 2.0, 3.0])
            let s = a.info(ArrayInfo<Double>.Options(rawValue: 3))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 3)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(6.0))
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(2.0))
			XCTAssertEqual(s.minValue, Optional(1.0))
			XCTAssertEqual(s.maxValue, Optional(3.0))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(2))
			XCTAssertEqual(s.exactMinDelta, Optional(1))
			XCTAssertEqual(s.exactMaxDelta, Optional(1))
			XCTAssertEqual(s.minDelta, Optional(1.0))
			XCTAssertEqual(s.maxDelta, Optional(1.0))
			XCTAssertEqual(s.avgDelta, Optional(1.0))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(1))
			XCTAssertEqual(s.median, Optional(2.0))
			XCTAssertEqual(s.histogram, Optional([2.0: 1, 3.0: 1, 1.0: 1]))
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int>([16, 8, 4, 2])
            let s = a.info(ArrayInfo<Int>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 4)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(30.0))
			XCTAssertEqual(s.exactSum, Optional(30))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(7.5))
			XCTAssertEqual(s.minValue, Optional(2))
			XCTAssertEqual(s.maxValue, Optional(16))
			XCTAssertEqual(s.minValueIndex, Optional(3))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(8))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(8.0))
			XCTAssertEqual(s.avgDelta, Optional(4.666666666666667))
			XCTAssertEqual(s.exactSumDelta, Optional(14))
			XCTAssertEqual(s.sumDelta, Optional(14.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, false)
			XCTAssertEqual(s.isStrictlyAscending, false)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(6.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int>([16, 8, 4, 2])
            let s = a.info(ArrayInfo<Int>.Options(rawValue: 1))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 4)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(30.0))
			XCTAssertEqual(s.exactSum, Optional(30))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(7.5))
			XCTAssertEqual(s.minValue, Optional(2))
			XCTAssertEqual(s.maxValue, Optional(16))
			XCTAssertEqual(s.minValueIndex, Optional(3))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(8))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(8.0))
			XCTAssertEqual(s.avgDelta, Optional(4.666666666666667))
			XCTAssertEqual(s.exactSumDelta, Optional(14))
			XCTAssertEqual(s.sumDelta, Optional(14.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, false)
			XCTAssertEqual(s.isStrictlyAscending, false)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(6.0))
			XCTAssertEqual(s.histogram, Optional([2: 1, 16: 1, 4: 1, 8: 1]))
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int>([16, 8, 4, 2])
            let s = a.info(ArrayInfo<Int>.Options(rawValue: 3))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 4)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(30.0))
			XCTAssertEqual(s.exactSum, Optional(30))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(7.5))
			XCTAssertEqual(s.minValue, Optional(2))
			XCTAssertEqual(s.maxValue, Optional(16))
			XCTAssertEqual(s.minValueIndex, Optional(3))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(8))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(8.0))
			XCTAssertEqual(s.avgDelta, Optional(4.666666666666667))
			XCTAssertEqual(s.exactSumDelta, Optional(14))
			XCTAssertEqual(s.sumDelta, Optional(14.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, false)
			XCTAssertEqual(s.isStrictlyAscending, false)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(6.0))
			XCTAssertEqual(s.histogram, Optional([2: 1, 16: 1, 4: 1, 8: 1]))
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int8>([16, 8, 4, 2])
            let s = a.info(ArrayInfo<Int8>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 4)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(30.0))
			XCTAssertEqual(s.exactSum, Optional(30))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(7.5))
			XCTAssertEqual(s.minValue, Optional(2))
			XCTAssertEqual(s.maxValue, Optional(16))
			XCTAssertEqual(s.minValueIndex, Optional(3))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(8))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(8.0))
			XCTAssertEqual(s.avgDelta, Optional(4.666666666666667))
			XCTAssertEqual(s.exactSumDelta, Optional(14))
			XCTAssertEqual(s.sumDelta, Optional(14.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, false)
			XCTAssertEqual(s.isStrictlyAscending, false)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(6.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int16>([16, 8, 4, 2])
            let s = a.info(ArrayInfo<Int16>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 4)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(30.0))
			XCTAssertEqual(s.exactSum, Optional(30))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(7.5))
			XCTAssertEqual(s.minValue, Optional(2))
			XCTAssertEqual(s.maxValue, Optional(16))
			XCTAssertEqual(s.minValueIndex, Optional(3))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(8))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(8.0))
			XCTAssertEqual(s.avgDelta, Optional(4.666666666666667))
			XCTAssertEqual(s.exactSumDelta, Optional(14))
			XCTAssertEqual(s.sumDelta, Optional(14.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, false)
			XCTAssertEqual(s.isStrictlyAscending, false)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(6.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int32>([16, 8, 4, 2])
            let s = a.info(ArrayInfo<Int32>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 4)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(30.0))
			XCTAssertEqual(s.exactSum, Optional(30))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(7.5))
			XCTAssertEqual(s.minValue, Optional(2))
			XCTAssertEqual(s.maxValue, Optional(16))
			XCTAssertEqual(s.minValueIndex, Optional(3))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(8))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(8.0))
			XCTAssertEqual(s.avgDelta, Optional(4.666666666666667))
			XCTAssertEqual(s.exactSumDelta, Optional(14))
			XCTAssertEqual(s.sumDelta, Optional(14.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, false)
			XCTAssertEqual(s.isStrictlyAscending, false)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(6.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt>([16, 8, 4, 2])
            let s = a.info(ArrayInfo<UInt>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 4)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(30.0))
			XCTAssertEqual(s.exactSum, Optional(30))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(7.5))
			XCTAssertEqual(s.minValue, Optional(2))
			XCTAssertEqual(s.maxValue, Optional(16))
			XCTAssertEqual(s.minValueIndex, Optional(3))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(8))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(8.0))
			XCTAssertEqual(s.avgDelta, Optional(4.666666666666667))
			XCTAssertEqual(s.exactSumDelta, Optional(14))
			XCTAssertEqual(s.sumDelta, Optional(14.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, false)
			XCTAssertEqual(s.isStrictlyAscending, false)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(6.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt8>([16, 8, 4, 2])
            let s = a.info(ArrayInfo<UInt8>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 4)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(30.0))
			XCTAssertEqual(s.exactSum, Optional(30))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(7.5))
			XCTAssertEqual(s.minValue, Optional(2))
			XCTAssertEqual(s.maxValue, Optional(16))
			XCTAssertEqual(s.minValueIndex, Optional(3))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(8))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(8.0))
			XCTAssertEqual(s.avgDelta, Optional(4.666666666666667))
			XCTAssertEqual(s.exactSumDelta, Optional(14))
			XCTAssertEqual(s.sumDelta, Optional(14.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, false)
			XCTAssertEqual(s.isStrictlyAscending, false)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(6.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt32>([16, 8, 4, 2])
            let s = a.info(ArrayInfo<UInt32>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 4)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(30.0))
			XCTAssertEqual(s.exactSum, Optional(30))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(7.5))
			XCTAssertEqual(s.minValue, Optional(2))
			XCTAssertEqual(s.maxValue, Optional(16))
			XCTAssertEqual(s.minValueIndex, Optional(3))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(8))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(8.0))
			XCTAssertEqual(s.avgDelta, Optional(4.666666666666667))
			XCTAssertEqual(s.exactSumDelta, Optional(14))
			XCTAssertEqual(s.sumDelta, Optional(14.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, false)
			XCTAssertEqual(s.isStrictlyAscending, false)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(6.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }
        #if os(Linux)
        do {
            let a = Array<Float16>([16.0, 8.0, 4.0, 2.0])
            let s = a.info(ArrayInfo<Float16>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 4)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(30.0))
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(7.5))
			XCTAssertEqual(s.minValue, Optional(2.0))
			XCTAssertEqual(s.maxValue, Optional(16.0))
			XCTAssertEqual(s.minValueIndex, Optional(3))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(8))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(8.0))
			XCTAssertEqual(s.avgDelta, Optional(4.666666666666667))
			XCTAssertEqual(s.exactSumDelta, Optional(14))
			XCTAssertEqual(s.sumDelta, Optional(14.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, false)
			XCTAssertEqual(s.isStrictlyAscending, false)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(6.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }
        #endif
        do {
            let a = Array<Float>([16.0, 8.0, 4.0, 2.0])
            let s = a.info(ArrayInfo<Float>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 4)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(30.0))
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(7.5))
			XCTAssertEqual(s.minValue, Optional(2.0))
			XCTAssertEqual(s.maxValue, Optional(16.0))
			XCTAssertEqual(s.minValueIndex, Optional(3))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(8))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(8.0))
			XCTAssertEqual(s.avgDelta, Optional(4.666666666666667))
			XCTAssertEqual(s.exactSumDelta, Optional(14))
			XCTAssertEqual(s.sumDelta, Optional(14.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, false)
			XCTAssertEqual(s.isStrictlyAscending, false)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(6.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Double>([16.0, 8.0, 4.0, 2.0])
            let s = a.info(ArrayInfo<Double>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 4)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(30.0))
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(7.5))
			XCTAssertEqual(s.minValue, Optional(2.0))
			XCTAssertEqual(s.maxValue, Optional(16.0))
			XCTAssertEqual(s.minValueIndex, Optional(3))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(8))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(8.0))
			XCTAssertEqual(s.avgDelta, Optional(4.666666666666667))
			XCTAssertEqual(s.exactSumDelta, Optional(14))
			XCTAssertEqual(s.sumDelta, Optional(14.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, false)
			XCTAssertEqual(s.isStrictlyAscending, false)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(6.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Double>([16.0, 8.0, 4.0, 2.0])
            let s = a.info(ArrayInfo<Double>.Options(rawValue: 1))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 4)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(30.0))
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(7.5))
			XCTAssertEqual(s.minValue, Optional(2.0))
			XCTAssertEqual(s.maxValue, Optional(16.0))
			XCTAssertEqual(s.minValueIndex, Optional(3))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(8))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(8.0))
			XCTAssertEqual(s.avgDelta, Optional(4.666666666666667))
			XCTAssertEqual(s.exactSumDelta, Optional(14))
			XCTAssertEqual(s.sumDelta, Optional(14.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, false)
			XCTAssertEqual(s.isStrictlyAscending, false)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(6.0))
			XCTAssertEqual(s.histogram, Optional([8.0: 1, 16.0: 1, 2.0: 1, 4.0: 1]))
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Double>([16.0, 8.0, 4.0, 2.0])
            let s = a.info(ArrayInfo<Double>.Options(rawValue: 3))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 4)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(30.0))
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(7.5))
			XCTAssertEqual(s.minValue, Optional(2.0))
			XCTAssertEqual(s.maxValue, Optional(16.0))
			XCTAssertEqual(s.minValueIndex, Optional(3))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, Optional(2))
			XCTAssertEqual(s.exactMaxDelta, Optional(8))
			XCTAssertEqual(s.minDelta, Optional(2.0))
			XCTAssertEqual(s.maxDelta, Optional(8.0))
			XCTAssertEqual(s.avgDelta, Optional(4.666666666666667))
			XCTAssertEqual(s.exactSumDelta, Optional(14))
			XCTAssertEqual(s.sumDelta, Optional(14.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, false)
			XCTAssertEqual(s.isStrictlyAscending, false)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(6.0))
			XCTAssertEqual(s.histogram, Optional([8.0: 1, 16.0: 1, 2.0: 1, 4.0: 1]))
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int>([-1, -1, -1, -1])
            let s = a.info(ArrayInfo<Int>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 4)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(-4.0))
			XCTAssertEqual(s.exactSum, Optional(-4))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, true)
			XCTAssertEqual(s.avg, Optional(-1.0))
			XCTAssertEqual(s.minValue, Optional(-1))
			XCTAssertEqual(s.maxValue, Optional(-1))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, Optional(0))
			XCTAssertEqual(s.exactMaxDelta, Optional(0))
			XCTAssertEqual(s.minDelta, Optional(0.0))
			XCTAssertEqual(s.maxDelta, Optional(0.0))
			XCTAssertEqual(s.avgDelta, Optional(0.0))
			XCTAssertEqual(s.exactSumDelta, Optional(0))
			XCTAssertEqual(s.sumDelta, Optional(0.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, false)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(0))
			XCTAssertEqual(s.median, Optional(-1.0))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int>([-1, -1, -1, -1])
            let s = a.info(ArrayInfo<Int>.Options(rawValue: 3))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 4)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(-4.0))
			XCTAssertEqual(s.exactSum, Optional(-4))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, true)
			XCTAssertEqual(s.avg, Optional(-1.0))
			XCTAssertEqual(s.minValue, Optional(-1))
			XCTAssertEqual(s.maxValue, Optional(-1))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, Optional(0))
			XCTAssertEqual(s.exactMaxDelta, Optional(0))
			XCTAssertEqual(s.minDelta, Optional(0.0))
			XCTAssertEqual(s.maxDelta, Optional(0.0))
			XCTAssertEqual(s.avgDelta, Optional(0.0))
			XCTAssertEqual(s.exactSumDelta, Optional(0))
			XCTAssertEqual(s.sumDelta, Optional(0.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, false)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(0))
			XCTAssertEqual(s.median, Optional(-1.0))
			XCTAssertEqual(s.histogram, Optional([-1: 4]))
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt>([9223372036854775808])
            let s = a.info(ArrayInfo<UInt>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [.element(9223372036854775808)])
			XCTAssertEqual(s.count, 1)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(9.223372036854776e+18))
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, true)
			XCTAssertEqual(s.elementOverflow, true)
			XCTAssertEqual(s.allElementsEqual, true)
			XCTAssertEqual(s.avg, Optional(9.223372036854776e+18))
			XCTAssertEqual(s.minValue, Optional(9223372036854775808))
			XCTAssertEqual(s.maxValue, Optional(9223372036854775808))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(9.223372036854776e+18))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt>([9223372036854775808])
            let s = a.info(ArrayInfo<UInt>.Options(rawValue: 3))
            XCTAssertEqual(s.issues, [.element(9223372036854775808)])
			XCTAssertEqual(s.count, 1)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(9.223372036854776e+18))
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, true)
			XCTAssertEqual(s.elementOverflow, true)
			XCTAssertEqual(s.allElementsEqual, true)
			XCTAssertEqual(s.avg, Optional(9.223372036854776e+18))
			XCTAssertEqual(s.minValue, Optional(9223372036854775808))
			XCTAssertEqual(s.maxValue, Optional(9223372036854775808))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(0))
			XCTAssertEqual(s.exactMinDelta, nil)
			XCTAssertEqual(s.exactMaxDelta, nil)
			XCTAssertEqual(s.minDelta, nil)
			XCTAssertEqual(s.maxDelta, nil)
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, true)
			XCTAssertEqual(s.isStrictlyDescending, true)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(9.223372036854776e+18))
			XCTAssertEqual(s.histogram, Optional([9223372036854775808: 1]))
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt>([0, 9223372036854775808])
            let s = a.info(ArrayInfo<UInt>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [.element(9223372036854775808)])
			XCTAssertEqual(s.count, 2)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(9.223372036854776e+18))
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, true)
			XCTAssertEqual(s.elementOverflow, true)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(4.611686018427388e+18))
			XCTAssertEqual(s.minValue, Optional(0))
			XCTAssertEqual(s.maxValue, Optional(9223372036854775808))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(1))
			XCTAssertEqual(s.exactMinDelta, Optional(9223372036854775808))
			XCTAssertEqual(s.exactMaxDelta, Optional(9223372036854775808))
			XCTAssertEqual(s.minDelta, Optional(9.223372036854776e+18))
			XCTAssertEqual(s.maxDelta, Optional(9.223372036854776e+18))
			XCTAssertEqual(s.avgDelta, Optional(9.223372036854776e+18))
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, Optional(9.223372036854776e+18))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(9223372036854775808))
			XCTAssertEqual(s.median, Optional(4.611686018427388e+18))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt>([0, 9223372036854775808])
            let s = a.info(ArrayInfo<UInt>.Options(rawValue: 3))
            XCTAssertEqual(s.issues, [.element(9223372036854775808)])
			XCTAssertEqual(s.count, 2)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(9.223372036854776e+18))
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, true)
			XCTAssertEqual(s.elementOverflow, true)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(4.611686018427388e+18))
			XCTAssertEqual(s.minValue, Optional(0))
			XCTAssertEqual(s.maxValue, Optional(9223372036854775808))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(1))
			XCTAssertEqual(s.exactMinDelta, Optional(9223372036854775808))
			XCTAssertEqual(s.exactMaxDelta, Optional(9223372036854775808))
			XCTAssertEqual(s.minDelta, Optional(9.223372036854776e+18))
			XCTAssertEqual(s.maxDelta, Optional(9.223372036854776e+18))
			XCTAssertEqual(s.avgDelta, Optional(9.223372036854776e+18))
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, Optional(9.223372036854776e+18))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(9223372036854775808))
			XCTAssertEqual(s.median, Optional(4.611686018427388e+18))
			XCTAssertEqual(s.histogram, Optional([0: 1, 9223372036854775808: 1]))
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt>([9223372036854775808, 9223372036854775809])
            let s = a.info(ArrayInfo<UInt>.Options(rawValue: 0))
            XCTAssertEqual(s.issues, [.element(9223372036854775809), .element(9223372036854775808)])
			XCTAssertEqual(s.count, 2)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(1.8446744073709552e+19))
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, true)
			XCTAssertEqual(s.elementOverflow, true)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(9.223372036854776e+18))
			XCTAssertEqual(s.minValue, Optional(9223372036854775808))
			XCTAssertEqual(s.maxValue, Optional(9223372036854775809))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(1))
			XCTAssertEqual(s.exactMinDelta, Optional(1))
			XCTAssertEqual(s.exactMaxDelta, Optional(1))
			XCTAssertEqual(s.minDelta, Optional(1.0))
			XCTAssertEqual(s.maxDelta, Optional(1.0))
			XCTAssertEqual(s.avgDelta, Optional(0.0))
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, Optional(0.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(1))
			XCTAssertEqual(s.median, Optional(9.223372036854776e+18))
			XCTAssertEqual(s.histogram, nil)
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<UInt>([9223372036854775808, 9223372036854775809])
            let s = a.info(ArrayInfo<UInt>.Options(rawValue: 3))
            XCTAssertEqual(s.issues, [.element(9223372036854775809), .element(9223372036854775808)])
			XCTAssertEqual(s.count, 2)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, nil)
			XCTAssertEqual(s.exactSum, nil)
			XCTAssertEqual(s.exactSumOverflow, true)
			XCTAssertEqual(s.elementOverflow, true)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, nil)
			XCTAssertEqual(s.minValue, Optional(9223372036854775808))
			XCTAssertEqual(s.maxValue, Optional(9223372036854775809))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(1))
			XCTAssertEqual(s.exactMinDelta, Optional(1))
			XCTAssertEqual(s.exactMaxDelta, Optional(1))
			XCTAssertEqual(s.minDelta, Optional(1.0))
			XCTAssertEqual(s.maxDelta, Optional(1.0))
			XCTAssertEqual(s.avgDelta, nil)
			XCTAssertEqual(s.exactSumDelta, nil)
			XCTAssertEqual(s.sumDelta, nil)
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, true)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, true)
			XCTAssertEqual(s.constantExactDelta, Optional(1))
			XCTAssertEqual(s.median, nil)
			XCTAssertEqual(s.histogram, Optional([9223372036854775808: 1]))
			XCTAssertEqual(s.mode, nil)
        }

        do {
            let a = Array<Int>([0, 1, 1, 2, 2])
            let s = a.info(ArrayInfo<Int>.Options(rawValue: 1))
            XCTAssertEqual(s.issues, [])
			XCTAssertEqual(s.count, 5)
			XCTAssertEqual(s.isEmpty, false)
			XCTAssertEqual(s.sum, Optional(6.0))
			XCTAssertEqual(s.exactSum, Optional(6))
			XCTAssertEqual(s.exactSumOverflow, false)
			XCTAssertEqual(s.elementOverflow, false)
			XCTAssertEqual(s.allElementsEqual, false)
			XCTAssertEqual(s.avg, Optional(1.2))
			XCTAssertEqual(s.minValue, Optional(0))
			XCTAssertEqual(s.maxValue, Optional(2))
			XCTAssertEqual(s.minValueIndex, Optional(0))
			XCTAssertEqual(s.maxValueIndex, Optional(3))
			XCTAssertEqual(s.exactMinDelta, Optional(0))
			XCTAssertEqual(s.exactMaxDelta, Optional(1))
			XCTAssertEqual(s.minDelta, Optional(0.0))
			XCTAssertEqual(s.maxDelta, Optional(1.0))
			XCTAssertEqual(s.avgDelta, Optional(0.5))
			XCTAssertEqual(s.exactSumDelta, Optional(2))
			XCTAssertEqual(s.sumDelta, Optional(2.0))
			XCTAssertEqual(s.exactSumDeltaOverflow, false)
			XCTAssertEqual(s.exactMinMaxDeltaOverflow, false)
			XCTAssertEqual(s.isAscending, true)
			XCTAssertEqual(s.isStrictlyAscending, false)
			XCTAssertEqual(s.isDescending, false)
			XCTAssertEqual(s.isStrictlyDescending, false)
			XCTAssertEqual(s.hasConstantExactDelta, false)
			XCTAssertEqual(s.constantExactDelta, nil)
			XCTAssertEqual(s.median, Optional(1.0))
			XCTAssertEqual(s.histogram, Optional([0: 1, 2: 2, 1: 2]))
			XCTAssertEqual(s.mode, Optional([1, 2]))
        }
    }
}
